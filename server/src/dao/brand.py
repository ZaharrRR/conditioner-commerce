from typing import Optional
from uuid import UUID

from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core import logger
from models import Brand
from schemas import BrandCreate, BrandRead, BrandUpdate


class BrandDAO:
    """DAO –¥–ª—è Brand"""

    def __init__(self, session: AsyncSession):
        self.session = session

    async def create_brand(self, brand: BrandCreate) -> BrandRead:
        """–°–æ–∑–¥–∞–µ—Ç Brand"""

        logger.debug("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Brand")
        try:
            new_brand = Brand(**brand.model_dump())
            self.session.add(new_brand)

            await self.session.flush()
            await self.session.commit()

            logger.info(f"Brand —Å–æ–∑–¥–∞–Ω —Å ID {new_brand.id}")
            return new_brand
        except IntegrityError:
            await self.session.rollback()
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å Brand —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {brand.name}"
            )
            raise ValueError(f"Brand '{brand.name}' already exists")
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ Brand: {e}")
            await self.session.rollback()

    async def get_brand_by_id(self, brand_id: UUID) -> Optional[BrandRead]:
        """–ü–æ–ª—É—á–∞–µ—Ç Brand –ø–æ id"""

        logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Brand —Å ID: {brand_id}")
        try:
            stmt = select(Brand).where(Brand.id == brand_id)
            result = await self.session.execute(stmt)
            record = result.scalar_one_or_none()
            logger.info(
                f"‚úÖ –ó–∞–ø–∏—Å—å Brand —Å ID {brand_id} {'–Ω–∞–π–¥–µ–Ω–∞' if record else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}"
            )
            return record
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Brand —Å ID {brand_id}: {e}")
            raise e

    async def get_brands(self) -> list[BrandRead]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Brand"""

        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Brand")
        try:
            stmt = select(Brand)
            result = await self.session.execute(stmt)
            records = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
            return records
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Brand: {e}")
            raise e

    async def delete_brand_by_id(self, brand_id: UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Brand"""

        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Brand –ø–æ idÔ∏è: {brand_id}")
        try:
            brand = await self.get_brand_by_id(brand_id)

            if not brand:
                logger.warning(f"‚ö†Ô∏è Brand —Å ID {brand_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            await self.session.delete(brand)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å Brand —Å ID {brand_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Brand: {e}")
            raise e

    async def update_brand(
        self, brand_id: UUID, brand_update: BrandUpdate
    ) -> Optional[BrandRead]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Brand –ø–æ id"""

        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Brand —Å ID {brand_id}")
        try:
            brand = await self.get_brand_by_id(brand_id)
            if not brand:
                logger.warning(f"‚ö†Ô∏è Brand —Å ID {brand_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            for field, value in brand_update.model_dump(exclude_unset=True).items():
                setattr(brand, field, value)

            await self.session.flush()
            await self.session.commit()

            await self.session.refresh(brand)
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å Brand –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return BrandRead.model_validate(brand)

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Brand —Å ID {brand_id}: {e}")
            await self.session.rollback()
            raise e
