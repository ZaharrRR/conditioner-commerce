from typing import Optional
from uuid import UUID
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from core import logger

from models import Service
from schemas import ServiceCreate, ServiceRead, ServiceUpdate


class ServiceDAO:
    """DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —É—Å–ª—É–≥ (Service)"""

    def __init__(self, session: AsyncSession):
        self.session = session

    async def create_service(self, service_data: ServiceCreate) -> ServiceRead:
        logger.debug("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ Service")
        try:
            new_service = Service(**service_data.model_dump())
            self.session.add(new_service)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ Service —Å ID {new_service.id} —Å–æ–∑–¥–∞–Ω–∞")
            return ServiceRead.model_validate(new_service, from_attributes=True)
        except IntegrityError:
            await self.session.rollback()
            logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ —Å —Ç–∏–ø–æ–º {service_data.service_type} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise ValueError("Service already exists")
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏ Service: {e}")
            raise RuntimeError("Database error")

    async def get_service_by_id(self, service_id: UUID):
        logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ Service —Å ID: {service_id}")
        try:
            stmt = select(Service).where(Service.id == service_id)
            result = await self.session.execute(stmt)
            service = result.scalar_one_or_none()
            logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ Service —Å ID {service_id} {'–Ω–∞–π–¥–µ–Ω–∞' if service else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
            return service
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ Service —Å ID {service_id}: {e}")
            raise RuntimeError("Database error")

    async def get_all_services(self) -> list[ServiceRead]:
        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ Service")
        try:
            stmt = select(Service)
            result = await self.session.execute(stmt)
            services = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(services)} —É—Å–ª—É–≥")
            return [ServiceRead.model_validate(service, from_attributes=True) for service in services]
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {e}")
            raise RuntimeError("Database error")

    async def update_service(self, service_id: UUID, service_update: ServiceUpdate) -> Optional[ServiceRead]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Service –ø–æ ID"""
        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service —Å ID {service_id}")
        try:
            service = await self.get_service_by_id(service_id)
            if not service:
                logger.warning(f"‚ö†Ô∏è Service —Å ID {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            update_data = service_update.model_dump(exclude_unset=True)
            for field, value in update_data.items():
                setattr(service, field, value)

            await self.session.flush()
            await self.session.commit()
            await self.session.refresh(service)
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å Service —Å ID {service_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return ServiceRead.model_validate(service, from_attributes=True)
        except IntegrityError:
            await self.session.rollback()
            logger.warning("‚ö†Ô∏è Service —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise ValueError("Service already exists")
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Service —Å ID {service_id}: {e}")
            raise RuntimeError("Database error")

    async def delete_service_by_id(self, service_id: UUID) -> bool:
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ Service —Å ID {service_id}")
        try:
            service = await self.get_service_by_id(service_id)
            if service is None:
                logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ Service —Å ID {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            await self.session.delete(service)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ Service —Å ID {service_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ Service —Å ID {service_id}: {e}")
            raise RuntimeError("Database error")
    async def get_services_with_logo(self):
        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ Service —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º logo_url")
        try:
            stmt = select(Service).where(Service.logo_url.isnot(None)).where(Service.logo_url != "")
            result = await self.session.execute(stmt)
            services = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ —Å logo_url")
            return [ServiceRead.model_validate(service, from_attributes=True) for service in services]
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ —Å logo_url: {e}")
            raise RuntimeError("Database error")