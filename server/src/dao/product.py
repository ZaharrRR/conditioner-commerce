from typing import Optional
from uuid import UUID

from sqlalchemy import select, delete
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core import logger
from models import Brand, Category, Product, ProductAttribute, Attribute
from schemas import ProductCreate, ProductRead, ProductReadWithRelations, ProductAttributeLink, ProductAttributeDelete


class ProductDAO:
    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def create_product(self, data: ProductCreate) -> ProductRead:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        logger.debug(f"üõí –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {data.name}")

        try:
            brand = await self.session.get(Brand, data.brand_id)
            if not brand:
                logger.warning(f"‚ö†Ô∏è –ë—Ä–µ–Ω–¥ —Å ID {data.brand_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"Brand with ID {data.brand_id} not found")

            category = await self.session.get(Category, data.category_id)
            if not category:
                logger.warning(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {data.category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                raise ValueError(f"Category with ID {data.category_id} not found")

            new_product = Product(**data.model_dump())
            self.session.add(new_product)
            await self.session.flush()

            if data.attributes:
                for attribute_data in data.attributes:
                    attribute = await self.session.get(Attribute, attribute_data["attribute_id"])
                    if not attribute:
                        logger.warning(f"‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç —Å ID {attribute_data['attribute_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        raise ValueError(f"Attribute with ID {attribute_data['attribute_id']} not found")

                    product_attribute = ProductAttribute(
                        product_id=new_product.id,
                        attribute_id=attribute.id,
                        value=attribute_data["value"]
                    )
                    self.session.add(product_attribute)

            await self.session.commit()

            logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID {new_product.id}")
            return await self.get_product_with_relations_by_id(new_product.id)

        except IntegrityError as e:
            await self.session.rollback()
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {data.name}({e})_")
            raise ValueError(f"Product '{data.name}' already exists")

        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            raise RuntimeError("Database error")

    async def get_product_with_relations_by_id(self, product_id: UUID) -> Optional[ProductReadWithRelations]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Product –ø–æ ID —Å –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {product_id}")

        try:
            stmt = (
                select(
                    Product.id,
                    Product.name,
                    Product.price,
                    Product.photo_url,
                    Brand.name.label("brand_name"),
                    Category.name.label("category_name"),
                    Product.created_at,
                    Product.updated_at
                )
                .join(Brand, Product.brand_id == Brand.id)
                .join(Category, Product.category_id == Category.id)
                .where(Product.id == product_id)
            )

            result = await self.session.execute(stmt)
            row = result.first()

            if not row:
                logger.warning(f"‚ö†Ô∏è Product —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            attributes = []
            stmt_attributes = (
                select(
                    Attribute.name, ProductAttribute.value
                )
                .join(ProductAttribute, ProductAttribute.attribute_id == Attribute.id)
                .where(ProductAttribute.product_id == product_id)
                .distinct()
            )

            result_attributes = await self.session.execute(stmt_attributes)

            for attribute_name, value in result_attributes:
                attributes.append({
                    "attribute_name": attribute_name,
                    "value": value
                })

            product_read_with_relations = ProductReadWithRelations(
                id=row.id,
                name=row.name,
                photo_url=row.photo_url,
                price=row.price,
                brand_name=row.brand_name,
                category_name=row.category_name,
                created_at=row.created_at,
                updated_at=row.updated_at,
                attributes=attributes
            )

            logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–∞–π–¥–µ–Ω —Å –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏")
            return product_read_with_relations

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            raise RuntimeError("Database error")

    async def get_new_products(self):
        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ 4 –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π Product")
        try:
            stmt = select(Product).order_by(Product.created_at.desc()).limit(4)

            result = await self.session.execute(stmt)
            rows = result.scalars().all()

            return rows

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Product: {e}")
            raise RuntimeError("Database error")


    async def update_product_photo(self, product_id: UUID, photo_url: str):
        result = await self.session.execute(select(Product).where(Product.id == product_id))
        product = result.scalar_one_or_none()
        if not product:
            raise ValueError(f"Product with {product_id} not found")

        product.photo_url = photo_url

        await self.session.flush()
        await self.session.commit()

        await self.session.refresh(product)
        return await self.get_product_with_relations_by_id(product_id)

    async def get_all_products(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ Product —Å brand_name –∏ category_name"""
        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Product")
        try:
            stmt = select(
                    Product.id,
                    Product.name,
                    Product.price,
                    Product.description,
                    Product.photo_url,
                    Brand.name.label("brand_name"),
                    Category.name.label("category_name"),
                    Product.created_at,
                    Product.updated_at
                ).join(Brand, Product.brand_id == Brand.id).join(Category, Product.category_id == Category.id)


            rows = await self.session.execute(stmt)
            records = rows.mappings().all()
            if not records:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []

            return records

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Product: {e}")
            raise RuntimeError("Database error")

    async def delete_product(self, product_id: UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID"""
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID: {product_id}")
        try:
            order = await self.get_product_with_relations_by_id(product_id)
            if not order:
                logger.warning(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            await self.session.delete(order)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª—ë–Ω")
            return True
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id}: {e}")
            raise RuntimeError("Database error")

    async def link_attributes_to_product(self, product_id: UUID,
                                         attributes_links: list[ProductAttributeLink]) -> ProductRead:
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∞—Ç—Ç—Ä–∏–±—É—Ç—ã –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pydantic"""
        logger.debug(f"‚öôÔ∏è –ü—Ä–∏–≤—è–∑–∫–∞ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å ID {product_id}")
        try:
            stmt = select(Product).where(Product.id == product_id)
            result = await self.session.execute(stmt)
            product = result.scalar_one_or_none()

            if not product:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"Product with ID {product_id} not found")

            attribute_ids = [link.attribute_id for link in attributes_links]
            stmt = select(Attribute).where(Attribute.id.in_(attribute_ids))
            result = await self.session.execute(stmt)
            attributes = result.scalars().all()

            if len(attributes) != len(attribute_ids):
                raise ValueError("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            for link in attributes_links:
                product_attribute = ProductAttribute(
                    product_id=product.id,
                    attribute_id=link.attribute_id,
                    value=link.value
                )
                self.session.add(product_attribute)

            await self.session.commit()
            await self.session.refresh(product)
            logger.info(f"‚úÖ –ê—Ç—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å ID {product.id}")
            return product

        except IntegrityError as e:
            await self.session.rollback()
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
            raise ValueError("Error linking attributes to product")
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
            raise RuntimeError("Database error")


    async def delete_attribute_from_product(self, data: ProductAttributeDelete) -> bool:
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ {data.name} —É –ø—Ä–æ–¥—É–∫—Ç–∞ {data.product_id}")
        try:
            stmt = (
                delete(ProductAttribute)
                .where(
                    ProductAttribute.product_id == data.product_id,
                    ProductAttribute.attribute.has(name=data.name)
                )
            )
            result = await self.session.execute(stmt)
            await self.session.commit()

            if result.rowcount == 0:
                logger.warning("‚ö†Ô∏è –ê—Ç—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω")
                return False

            logger.info(f"‚úÖ –ê—Ç—Ç—Ä–∏–±—É—Ç {data.attribute_id} —É–¥–∞–ª—ë–Ω —É –ø—Ä–æ–¥—É–∫—Ç–∞ {data.product_id}")
            return True

        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞: {e}")
            raise RuntimeError("Database error")