from typing import Optional
from uuid import UUID

from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core import logger
from models import Attribute
from schemas import AttributeCreate, AttributeRead


class AttributeDAO:
    """DAO –¥–ª—è Attribute"""

    def __init__(self, session: AsyncSession):
        self.session = session

    async def create_attribute(self, attribute: AttributeCreate) -> AttributeRead:
        """–°–æ–∑–¥–∞–µ—Ç Attribute"""

        logger.debug("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Attribute")
        try:
            new_attribute = Attribute(name=attribute.name)
            self.session.add(new_attribute)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å Attribute c ID {new_attribute.id} —Å–æ–∑–¥–∞–Ω–∞")
            return new_attribute
        except IntegrityError:
            await self.session.rollback()
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å Attribute —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {attribute.name}"
            )
            raise ValueError(f"Attribute '{attribute.name}' already exists")
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ Attribute: {e}")
            raise RuntimeError("Database error")
            await self.session.rollback()

    async def get_attribute_by_id(self, attribute_id: UUID) -> Optional[AttributeRead]:
        """–ü–æ–ª—É—á–∞–µ—Ç Attribute –ø–æ id"""

        logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–∏–µ Attribute —Å ID: {attribute_id}")
        try:
            stmt = select(Attribute).where(Attribute.id == attribute_id)
            result = await self.session.execute(stmt)
            record = result.scalar_one_or_none()
            logger.info(
                f"‚úÖ –ó–∞–ø–∏—Å—å Attribute —Å ID {attribute_id} {'–Ω–∞–π–¥–µ–Ω–∞' if record else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}"
            )
            return record
        except SQLAlchemyError as e:
            logger.error(
                f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Attribute —Å ID {attribute_id}: {e}"
            )
            raise RuntimeError("Database error")

    async def get_attributes(self) -> list[AttributeRead]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ Attribute"""

        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Attribute")
        try:
            stmt = select(Attribute)
            result = await self.session.execute(stmt)
            records = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π.")
            return records
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Attribute: {e}")
            raise RuntimeError("Database error")

    async def delete_attribute_by_id(self, attribute_id: UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Attribute –ø–æ id"""

        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ Attribute –ø–æ idÔ∏è: {attribute_id}")
        try:
            attribute = await self.get_attribute_by_id(attribute_id)

            if not attribute:
                logger.warning(f"‚ùå Attribute —Å ID {attribute_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            await self.session.delete(attribute)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å Attribute —Å ID {attribute_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Attribute: {e}")
            raise RuntimeError("Database error")
