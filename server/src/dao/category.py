from uuid import UUID

from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core import logger
from models import Category
from schemas import CategoryCreate, CategoryRead


class CategoryDAO:
    """DAO –¥–ª—è Category"""

    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def create_category(self, category: CategoryCreate) -> CategoryRead:
        """–°–æ–∑–¥–∞–µ—Ç –ö–∞—Ç–µ–≥–æ—Ä–∏—é"""

        logger.debug("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Brand")
        try:
            new_category = Category(**category.model_dump())
            self.session.add(new_category)

            await self.session.flush()
            await self.session.commit()

            logger.info(f"Brand —Å–æ–∑–¥–∞–Ω —Å ID {new_category.id}")
            return CategoryRead.model_validate(new_category)
        except IntegrityError:
            await self.session.rollback()
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å Category —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category.name}"
            )
            raise ValueError(f"Category '{category.name}' already exists")
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ Brand: {e}")
            await self.session.rollback()
            raise e

    async def get_all_categories(self) -> list[Category]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Category"""

        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Brand")
        try:
            stmt = select(Category)
            result = await self.session.execute(stmt)
            records = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
            return records
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π Category: {e}")
            raise e

    async def get_category_by_id(self, category_id: UUID) -> CategoryRead:
        """–ü–æ–ª—É—á–∞–µ—Ç Category –ø–æ id"""

        logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Category —Å ID: {category_id}")
        try:
            stmt = select(Category).where(Category.id == category_id)
            result = await self.session.execute(stmt)
            record = result.scalar_one_or_none()
            logger.info(
                f"‚úÖ –ó–∞–ø–∏—Å—å Category —Å ID {category_id} {'–Ω–∞–π–¥–µ–Ω–∞' if record else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}"
            )
            return record
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Category —Å ID {category_id}: {e}")
            raise e

    async def get_category_by_name(self, category_name: str) -> CategoryRead:
        """–ü–æ–ª—É—á–∞–µ—Ç Category –ø–æ name"""
        logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Category —Å Name: {category_name}")
        try:
            stmt = select(Category).where(Category.name == category_name)
            result = await self.session.execute(stmt)
            record = result.scalar_one_or_none()
            logger.info(
                f"‚úÖ –ó–∞–ø–∏—Å—å Category —Å name: {category_name} {'–Ω–∞–π–¥–µ–Ω–∞' if record else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}"
            )
            return CategoryRead.model_validate(record)
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Category —Å name {category_name}: {e}")
            raise e

    async def delete_category_by_id(self, category_id: UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Category –ø–æ id"""

        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ Category –ø–æ idÔ∏è: {category_id}")
        try:
            category = await self.get_category_by_id(category_id)

            if not category:
                logger.warning(f"‚ùå Category —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            await self.session.delete(category)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å Category —Å ID {category_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except SQLAlchemyError as e:
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Category: {e}")
            raise e
